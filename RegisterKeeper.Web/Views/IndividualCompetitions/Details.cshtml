@model RegisterKeeper.Web.Models.IndividualCompetition

@{
    ViewBag.Title = "Details";
}

<style>
    .btn-add-register-card
    {
        float: right;
        margin-top: 10px;
    }
</style>

<div class="clearfix">
    @Html.ActionLink("Add Register Card", "Create", "RegisterCards", new { individualCompetitionId = Model.Id }, new { @class = "btn btn-add-register-card" })
    <h2>@Html.DisplayFor(model => model.Name)</h2>
    @(Model.StartDateTime.ToString("dddd, d MMMM yyyy, h.mmtt"))<br />
    <i>@Model.NumberOfSightingShots&amp;@Model.NumberOfScoringShots @@ @Html.DisplayFor(Model.Distances), @Model.Location</i>
</div>

<div id="Grid">
    @{ var position = 1;}
    @foreach (var registerCard in Model.RegisterCards.OrderByDescending(r => r.SortOrder))
    {
        <div class="mix" id="RegisterCardId-@registerCard.Id" data-sortorder="@(registerCard.SortOrder)" >
            <div class="register-card-container">

                @* On grid sort, position value should fade out, update to new number and fade in? *@
                <div class="position-wrapper-outer">
                    <div class="position-wrapper-inner">
                        <div class="position">@position</div>
                    </div>
                </div>

                <div class="register-card-detail">
                    <div class="clearfix">
                        <h4 class="header">
                            <span class="competitor-index-number">@((registerCard.CompetitorIndexNumber ?? 0).ToString("000"))</span>
                            @registerCard.CompetitorName
                            <span class="competitor-details">@registerCard.CompetitorClass - @registerCard.CompetitorClub</span>
                        </h4>

                        @* TODO: "Brought forward" and "points off"*@

                    </div>

                    <table>
                        <tr>
                            <th>@*Distance*@</th>
                            @foreach (var i in Enumerable.Range(1, Model.NumberOfSightingShots))
                            {
                                <th class="@(i == 1 ? "border-left" : null)">S@(i)</th>
                            }
                            @foreach (var i in Enumerable.Range(1, Model.NumberOfScoringShots))
                            {
                                <th class="@(i == 1 ? "border-left" : null)">@i</th>
                            }
                            <th class="border-left total-column">Total</th>
                        </tr>
                        @foreach (var distance in Model.Distances.ToList())
                        {
                            var shoot = registerCard.Shoots.SingleOrDefault(s => s.Distance == distance);
                            <tr>
                                <td>@distance.DisplayValue()</td>
                                @foreach (var i in Enumerable.Range(1, Model.NumberOfSightingShots))
                                {
                                    var shot = shoot.Sighters.SingleOrDefault(ss => ss.ShotNumber == i);
                                    <td class="@(i == 1 ? "border-left" : null)" id="shotId-@shot.Id">
                                        @shot.Score.DisplayValue()
                                    </td>
                                }
                                @foreach (var i in Enumerable.Range(1, Model.NumberOfScoringShots))
                                {
                                    var shot = shoot.ScoringShots.SingleOrDefault(ss => ss.ShotNumber == i);
                                    <td class="@(i == 1 ? "border-left" : null)" id="shotId-@shot.Id">
                                        @shot.Score.DisplayValue()
                                    </td>
                                }
                                <td class="border-left" id="ShootId-@shoot.Id-TotalScore">
                                    @shoot.TotalScore.ToString()
                                </td>
                            </tr>
                        }
                    </table>


                    @if (Model.Distances.ToList().Count > 1)
                    {
                        <div class="register-card-grand-total">
                            Grand Total:
                            <div class="register-card-grand-total-value" id="RegisterCardId-@registerCard.Id-TotalScore">
                                @registerCard.TotalScore
                            </div>
                        </div>    
                    }

                </div>
                <div class="register-card-controls">
                    <div>
                        @Html.ActionLink("Edit", "Edit", "RegisterCards", new { id = registerCard.Id }, new { @class = "btn" })
                        @Html.ActionLink("Delete", "Delete", null, new { @class = "btn" })
                    </div>
                </div>

            </div>
        </div>

                    position += 1;
    }

</div>

@section scripts
{
    <script src="~/Scripts/jquery.mixitup.js"></script>
    <script src="~/Scripts/jquery.signalR-1.1.3.js"></script>
    <script src="~/Scripts/jquery-ui-1.8.24.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>

        $(function () {
            var hub = $.connection.registerKeeperHub;

            hub.client.ScoreUpdate = function (shotId, score) {
                $("#shotId-" + shotId).html(score);
                $("#shotId-" + shotId).stop(true, true).effect("highlight", null, 5000);
            };

            hub.client.ShootTotalScoreUpdate = function (shootId, score) {
                $("#ShootId-" + shootId + "-TotalScore").html(score);
            };

            hub.client.RegisterCardTotalScoreUpdate = function (registerCardId, score) {
                $("#RegisterCardId-" + registerCardId + "-TotalScore").html(score);
            };

            hub.client.RegisterCardSortOrderUpdate = function(registerCardId, sortorder) {
                $('#RegisterCardId-' + registerCardId).attr("data-sortorder", sortorder);
                $('#Grid').mixitup('sort', ['data-sortorder', 'asc']);
            };

            $.connection.hub.start();

            $('#Grid').mixitup();

            //$('#Grid').mixitup('sort', ['data-sortorder', 'asc']);

        });
    </script>
}
