@using RegisterKeeper.Web.Models
@model TeamRegisterCard

<table>
    <tr>
        <th>@*Competitor Name*@</th>
        <th>@*Distance*@</th>
        @foreach (var i in Enumerable.Range(1, ViewBag.NumberOfSightingShots))
        {
            <th class="@(i == 1 ? "border-left" : null)">S@(i)</th>
        }
        @foreach (var i in Enumerable.Range(1, ViewBag.NumberOfScoringShots))
        {
            <th class="@(i == 1 ? "border-left" : null)">@i</th>
        }

        @{ var firstDistance = true; }
        @foreach (Distance distance in ViewBag.DistanceList)
        {
            <th class="@(firstDistance ? "border-left" : null)">@(distance.DisplayValue())</th>
            firstDistance = false;
        }
        <th class="border-left total-column">Total</th>
    </tr>

    @foreach (var registerCard in Model.TeamCompetitors)
    {

        firstDistance = true;
        foreach (Distance distance in ViewBag.DistanceList)
        {
            var shoot = registerCard.Shoots.SingleOrDefault(s => s.Distance == distance);
        <tr>
            @if (firstDistance)
            {
                <td class="competitor-name" rowspan="@(ViewBag.DistanceList.Count)">@registerCard.CompetitorName</td>
            }
            <td class="border-left distance">@distance.DisplayValue()</td>
            @foreach (var i in Enumerable.Range(1, ViewBag.NumberOfSightingShots))
            {
                var sightingShot = shoot.Sighters.SingleOrDefault(ss => ss.ShotNumber == i);
                <td class="@(i == 1 ? "border-left" : null)">
                    <span id="ShotId-@sightingShot.Id" class="@(sightingShot.Converted ? "strikethrough" : null)">
                        @(sightingShot.Score.DisplayValue())
                    </span>
                </td>
            }
            @foreach (var i in Enumerable.Range(1, ViewBag.NumberOfScoringShots))
            {
                var scoringShot = shoot.ScoringShots.SingleOrDefault(ss => ss.ShotNumber == i);
                <td class="@(i == 1 ? "border-left" : null)" id="ShotId-@scoringShot.Id">
                    @scoringShot.Score.DisplayValue()
                </td>
            }

            @{ var totalsFirstDistance = true; }
            @foreach (Distance totalsDistance in ViewBag.DistanceList)
            {
                <td class="@(totalsFirstDistance ? "border-left" : null)" id="@(distance == totalsDistance ? "ShootId-" + shoot.Id + "-TotalScore" : null)">
                    @if (shoot != null && distance == totalsDistance)
                    {
                        <text>@shoot.TotalScore.ToString()</text>
                    }
                </td>                
                    totalsFirstDistance = false;
            }

            @if (firstDistance)
            {
                <td class="border-left total" rowspan="@(ViewBag.DistanceList.Count)" id="CompetitorId-@registerCard.Id-TotalScore">
                    @registerCard.TotalScore
                </td>
            }
        </tr>
            firstDistance = false;
        }
    }
    <tr>
        <td colspan="@(2 + ViewBag.NumberOfSightingShots + ViewBag.NumberOfScoringShots)" style="text-align: left">Totals</td>

        @{ var grandTotalsFirstDistance = true; }
        @foreach (Distance distance in ViewBag.DistanceList)
        {
            <td class="@(grandTotalsFirstDistance ? "border-left" : null)" id="TeamRegisterCardId-@Model.Id-@distance.DisplayValue()-TotalScore">
                @(Model.TotalAt(distance))
            </td>
            grandTotalsFirstDistance = false;
        }
        <td class="border-left total-column register-card-grand-total">
            <div class="register-card-grand-total-value" id="TeamRegisterCardId-@Model.Id-TotalScore">@(Model.TotalScore)</div>
        </td>
    </tr>
</table>
