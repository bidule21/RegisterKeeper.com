@model RegisterKeeper.Web.Models.IndividualCompetition

@{
    ViewBag.Title = "Details";
}

<style>
    .btn-add-register-card
    {
        float: right;
        margin-top: 10px;
    }
</style>

<div class="clearfix">
    @*<div class="pull-right">*@
    @Html.ActionLink("Add Register Card", "CreateForIndividualCompetition", "IndividualRegisterCards", new { individualCompetitionId = Model.Id }, new { @class = "btn btn-add-register-card" })
    @*</div>*@
    <h2>@Html.DisplayFor(model => model.Name)</h2>
    @(Model.StartDateTime.ToString("dddd, d MMMM yyyy, h.mmtt"))<br />
    <i>@Model.NumberOfSightingShots&amp;@Model.NumberOfScoringShots @@ @Html.DisplayFor(Model.Distances), @Model.Location</i>
</div>

@*<style>
    #Grid
    {
        margin: 20px 0 20px 0;
        text-align: center;
    }

        #Grid .mix
        {
            opacity: 0;
            display: none;
            width: 100%;
        }

    .register-card-container
    {
        border: 1px solid #dddddd;
        padding: 10px;
        margin-bottom: 10px;
        display: inline-block;
        border-radius: 10px;
        position: relative;
    }


        .register-card-container .position-wrapper-outer
        {
            position: absolute;
            top: 0;
            left: -80px;
            height: 100%;
            width: 65px;
            /*border: 1px solid green;*/
        }

        .register-card-container .position-wrapper-inner
        {
            display: table;
            height: 100%;
            width: 100%;
            text-align: right;
        }

        .register-card-container .position
        {
            height: 100px;
            display: table-cell;
            vertical-align: top;
            padding-top: 10px;
            color: #DDDDDD;
            font-size: 45px;
            line-height: 45px;
            font-weight: bold;
        }

    .register-card-detail
    {
        display: table-cell;
        padding-right: 1em;
    }

    .register-card-controls
    {
        display: table-cell;
        /*vertical-align: top;*/
        vertical-align: bottom;
        padding-left: 1em;
        border-left: 1px solid #dddddd;
    }

        .register-card-controls a
        {
            display: block;
            margin: 0.5em 0;
        }

    .competitor-name
    {
        margin: 0;
        float: left;
    }

    .competitor-index-number
    {
        color: #778899;
    }

    .competitor-details
    {
        font-size: 75%;
        font-weight: normal;
        font-style: italic;
        padding-left: 10px;
    }

    .register-card-container table
    {
        padding-top: 5px;
        display: table-cell;
    }

    .register-card-container th
    {
        font-weight: normal;
        text-align: center;
        font-size: 75%;
        padding: 0 0.5em 0 0.5em;
    }

    .register-card-container td
    {
        border-top: 1px solid #dddddd;
        padding: 0 0.5em 0 0.5em;
        text-align: center;
        min-width: 1em;
    }

    table .border-left
    {
        border-left: 1px solid #dddddd;
    }

    /*table .total-column
    {
        padding-left: 2em;
        padding-right: 2em;
    }*/

    .register-card-brought-forward
    {
        border: 0 solid #c0c0c0;
        padding: 0 2px 0 2px;
        display: inline-block;
        margin-right: 5px;
    }

    .register-card-points-off
    {
        border: 1px solid #dddddd;
        padding: 0 2px 0 2px;
        font-weight: bold;
    }

    .register-card-grand-total
    {
        padding-left: 10px;
        vertical-align: bottom;
        display: table-cell;
    }

    .register-card-grand-total-value
    {
        font-size: 150%;
        text-align: center;
        margin: 5px 0 0 0;
        padding: 10px;
        border: 1px solid #EEEEEE;
        width: 90px;
    }

    .total-column
    {
        min-width: 5em;
    }
</style>*@

<div id="Grid">
    @{ var position = 1;}
    @foreach (var registerCard in Model.IndividualRegisterCards)
    {
        <div class="mix" data-pointsoff="@(registerCard.SortOrder)">
            <div class="register-card-container" id="registerCard@(registerCard.Id)">

                @* On grid sort, position value should fade out, update to new number and fade in? *@
                <div class="position-wrapper-outer">
                    <div class="position-wrapper-inner">
                        <div class="position">@position</div>
                    </div>
                </div>

                <div class="register-card-detail">
                    <div class="clearfix">
                        <h4 class="header">
                            <span class="competitor-index-number">@((registerCard.CompetitorIndexNumber ?? 0).ToString("000"))</span>
                            @registerCard.CompetitorName
                            <span class="competitor-details">@registerCard.CompetitorClass - @registerCard.CompetitorClub</span>
                        </h4>
                        @*<div class="pull-right">*@
                        @*<span>Brought Forward:</span>*@
                        @* <span id="registerCard@(registerCard.Id)BroughtForward" class="register-card-brought-forward">
                    @(registerCard.BroughtForwardPoints).@(registerCard.BroughtForwardVs)v
                </span>*@
                        @*<span>Points Off:</span>*@
                        @*<span id="registerCard@(registerCard.Id)PointsOff" class="register-card-points-off">
                    @(registerCard.TotalPointsOff)
                </span>*@
                        @*</div>*@
                    </div>

                    <table>
                        <tr>
                            <th>@*Distance*@</th>
                            @foreach (var i in Enumerable.Range(1, Model.NumberOfSightingShots))
                            {
                                <th class="@(i == 1 ? "border-left" : null)">S@(i)</th>
                            }
                            @foreach (var i in Enumerable.Range(1, Model.NumberOfScoringShots))
                            {
                                <th class="@(i == 1 ? "border-left" : null)">@i</th>
                            }
                            <th class="border-left total-column">Total</th>
                        </tr>
                        @foreach (var distance in Model.Distances.ToList())
                        {
                            var shoot = registerCard.Shoots.SingleOrDefault(s => s.Distance == distance);
                            <tr>
                                <td>@distance.DisplayValue()</td>
                                @foreach (var i in Enumerable.Range(1, Model.NumberOfSightingShots))
                                {
                                    <td class="@(i == 1 ? "border-left" : null)">
                                        @{
                                    if (shoot != null)
                                    {
                                        var shot = shoot.Sighters.SingleOrDefault(ss => ss.ShotNumber == i);
                                        if (shot != null)
                                        {
                                            <text>@shot.Score.DisplayValue()</text>
                                        }
                                    }
                                        }
                                    </td>
                                }
                                @foreach (var i in Enumerable.Range(1, Model.NumberOfScoringShots))
                                {
                                    <td class="@(i == 1 ? "border-left" : null)">
                                        @{
                                    if (shoot != null)
                                    {
                                        var shot = shoot.ScoringShots.SingleOrDefault(ss => ss.ShotNumber == i);
                                        if (shot != null)
                                        {
                                            <text>@shot.Score.DisplayValue()</text>
                                        }
                                    }
                                        }
                                    </td>
                                }
                                <td class="border-left">
                                    @{
                                if (shoot != null)
                                {
                                        <text>@shoot.TotalScore.ToString()</text>
                                }
                                    }
                                </td>
                            </tr>
                        }
                        @*<tr>
                    <td style="text-align: right">x900</td>
                    <td id="registerCard@(registerCard.Id)x900shotS1">@registerCard.x900Sighter1.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900shotS2">@registerCard.x900Sighter2.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900shot1">@registerCard.x900Shot1.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900shot2">@registerCard.x900Shot2.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900shot3">@registerCard.x900Shot3.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900shot4">@registerCard.x900Shot4.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900shot5">@registerCard.x900Shot5.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900shot6">@registerCard.x900Shot6.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900shot7">@registerCard.x900Shot7.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900shot8">@registerCard.x900Shot8.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900shot9">@registerCard.x900Shot9.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900shot10">@registerCard.x900Shot10.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900shot11">@registerCard.x900Shot11.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900shot12">@registerCard.x900Shot12.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900shot13">@registerCard.x900Shot13.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900shot14">@registerCard.x900Shot14.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900shot15">@registerCard.x900Shot15.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x900Total" style="min-width: 50px">@(registerCard.X900Total)</td>
                </tr>
                <tr>
                    <td style="text-align: right">x1000</td>
                    <td id="registerCard@(registerCard.Id)x1000shotS1">@registerCard.x1000Sighter1.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000shotS2">@registerCard.x1000Sighter2.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000shot1">@registerCard.x1000Shot1.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000shot2">@registerCard.x1000Shot2.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000shot3">@registerCard.x1000Shot3.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000shot4">@registerCard.x1000Shot4.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000shot5">@registerCard.x1000Shot5.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000shot6">@registerCard.x1000Shot6.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000shot7">@registerCard.x1000Shot7.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000shot8">@registerCard.x1000Shot8.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000shot9">@registerCard.x1000Shot9.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000shot10">@registerCard.x1000Shot10.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000shot11">@registerCard.x1000Shot11.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000shot12">@registerCard.x1000Shot12.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000shot13">@registerCard.x1000Shot13.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000shot14">@registerCard.x1000Shot14.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000shot15">@registerCard.x1000Shot15.DisplayValue()</td>
                    <td id="registerCard@(registerCard.Id)x1000Total" style="min-width: 50px">@(registerCard.X1000Total)</td>
                </tr>*@
                    </table>


                    @if (Model.Distances.ToList().Count > 1)
                    {
                        <div class="register-card-grand-total">
                            Grand Total:
                            <div class="register-card-grand-total-value">
                                @registerCard.TotalScore
                            </div>
                        </div>    
                    }

                </div>
                <div class="register-card-controls">
                    <div>
                        @Html.ActionLink("Edit", "EditForIndividualCompetition", "IndividualRegisterCards", new { id = registerCard.Id }, new { @class = "btn" })
                        @Html.ActionLink("Delete", "Delete", null, new { @class = "btn" })
                    </div>
                </div>

            </div>
        </div>

                    position += 1;
    }

</div>

@section scripts
{
    <script src="~/Scripts/jquery.mixitup.js"></script>
    @*<script src="~/Scripts/jquery.signalR-1.1.2.js"></script>*@
    @*<script src="~/Scripts/jquery-ui-1.8.24.js"></script>*@
    @*<script src="~/signalr/hubs"></script>*@
    <script>

        function PointsOffFromScore(score) {
            if (score == "V") {
                return 0;
            }
            return 5 - parseInt(score, 10);
        }

        $(function () {
            //var hub = $.connection.queensFinalHub;

            //hub.client.RegisterShot = function (registerCardId, distance, shotNumber, score, totalPointsOff, x900Total, x1000Total, grandTotal) {

            //    // Display shot score
            //    var cell = $('#registerCard' + registerCardId + distance + 'shot' + shotNumber);
            //    cell.html(score);
            //    cell.effect("highlight", null, 5000);

            //    // Set x900 total display
            //    cell = $('#registerCard' + registerCardId + 'x900Total');
            //    cell.html(x900Total);

            //    // Set x1000 total display
            //    cell = $('#registerCard' + registerCardId + 'x1000Total');
            //    cell.html(x1000Total);

            //    // Set the Grand Total display
            //    cell = $('#registerCard' + registerCardId + 'GrandTotal');
            //    cell.html(grandTotal);

            //    // Set points off display
            //    var pointsOff = $('#registerCard' + registerCardId + 'PointsOff');
            //    pointsOff.html(totalPointsOff);

            //    // Set the data-pointsoff attribute
            //    var pointsOffAttr = $('#registerCard' + registerCardId);
            //    pointsOffAttr.attr("data-pointsoff", totalPointsOff);

            //    $('#Grid').mixitup('sort', ['data-pointsoff', 'desc']);
            //};

            //$.connection.hub.start();

            $('#Grid').mixitup();

            $('#Grid').mixitup('sort', ['data-pointsoff', 'desc']);

            //$('#btnSort').click(function () {
            //    $('#Grid').mixitup('sort', ['data-pointsoff', 'desc']);
            //});

        });
    </script>
}
