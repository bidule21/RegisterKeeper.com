@model RegisterKeeper.Web.Models.IndividualCompetition

@{
    ViewBag.Title = "Details";
}

<style>
    .btn-add-register-card
    {
        float: right;
        margin-top: 10px;
    }
</style>

<div class="clearfix">
    @*<div class="pull-right">*@
    @Html.ActionLink("Add Register Card", "Create", "RegisterCards", new { individualCompetitionId = Model.Id }, new { @class = "btn btn-add-register-card" })
    @*</div>*@
    <h2>@Html.DisplayFor(model => model.Name)</h2>
    @(Model.StartDateTime.ToString("dddd, d MMMM yyyy, h.mmtt"))<br />
    <i>@Model.NumberOfSightingShots&amp;@Model.NumberOfScoringShots @@ @Html.DisplayFor(Model.Distances), @Model.Location</i>
</div>

<div id="Grid">
    @{ var position = 1;}
    @foreach (var registerCard in Model.RegisterCards)
    {
        <div class="mix" data-pointsoff="@(registerCard.SortOrder)">
            <div class="register-card-container" id="registerCard@(registerCard.Id)">

                @* On grid sort, position value should fade out, update to new number and fade in? *@
                <div class="position-wrapper-outer">
                    <div class="position-wrapper-inner">
                        <div class="position">@position</div>
                    </div>
                </div>

                <div class="register-card-detail">
                    <div class="clearfix">
                        <h4 class="header">
                            <span class="competitor-index-number">@((registerCard.CompetitorIndexNumber ?? 0).ToString("000"))</span>
                            @registerCard.CompetitorName
                            <span class="competitor-details">@registerCard.CompetitorClass - @registerCard.CompetitorClub</span>
                        </h4>
                        
                        @* TODO: "Brought forward" and "points off"*@

                    </div>

                    <table>
                        <tr>
                            <th>@*Distance*@</th>
                            @foreach (var i in Enumerable.Range(1, Model.NumberOfSightingShots))
                            {
                                <th class="@(i == 1 ? "border-left" : null)">S@(i)</th>
                            }
                            @foreach (var i in Enumerable.Range(1, Model.NumberOfScoringShots))
                            {
                                <th class="@(i == 1 ? "border-left" : null)">@i</th>
                            }
                            <th class="border-left total-column">Total</th>
                        </tr>
                        @foreach (var distance in Model.Distances.ToList())
                        {
                            var shoot = registerCard.Shoots.SingleOrDefault(s => s.Distance == distance);
                            <tr>
                                <td>@distance.DisplayValue()</td>
                                @foreach (var i in Enumerable.Range(1, Model.NumberOfSightingShots))
                                {
                                    <td class="@(i == 1 ? "border-left" : null)">
                                        @{
                                    if (shoot != null)
                                    {
                                        var shot = shoot.Sighters.SingleOrDefault(ss => ss.ShotNumber == i);
                                        if (shot != null)
                                        {
                                            <text>@shot.Score.DisplayValue()</text>
                                        }
                                    }
                                        }
                                    </td>
                                }
                                @foreach (var i in Enumerable.Range(1, Model.NumberOfScoringShots))
                                {
                                    <td class="@(i == 1 ? "border-left" : null)">
                                        @{
                                    if (shoot != null)
                                    {
                                        var shot = shoot.ScoringShots.SingleOrDefault(ss => ss.ShotNumber == i);
                                        if (shot != null)
                                        {
                                            <text>@shot.Score.DisplayValue()</text>
                                        }
                                    }
                                        }
                                    </td>
                                }
                                <td class="border-left">
                                    @{
                                if (shoot != null)
                                {
                                        <text>@shoot.TotalScore.ToString()</text>
                                }
                                    }
                                </td>
                            </tr>
                        }
                    </table>


                    @if (Model.Distances.ToList().Count > 1)
                    {
                        <div class="register-card-grand-total">
                            Grand Total:
                            <div class="register-card-grand-total-value">
                                @registerCard.TotalScore
                            </div>
                        </div>    
                    }

                </div>
                <div class="register-card-controls">
                    <div>
                        @Html.ActionLink("Edit", "Edit", "RegisterCards", new { id = registerCard.Id }, new { @class = "btn" })
                        @Html.ActionLink("Delete", "Delete", null, new { @class = "btn" })
                    </div>
                </div>

            </div>
        </div>

                    position += 1;
    }

</div>

@section scripts
{
    <script src="~/Scripts/jquery.mixitup.js"></script>
    @*<script src="~/Scripts/jquery.signalR-1.1.2.js"></script>*@
    @*<script src="~/Scripts/jquery-ui-1.8.24.js"></script>*@
    @*<script src="~/signalr/hubs"></script>*@
    <script>

        function PointsOffFromScore(score) {
            if (score == "V") {
                return 0;
            }
            return 5 - parseInt(score, 10);
        }

        $(function () {
            //var hub = $.connection.queensFinalHub;

            //hub.client.RegisterShot = function (registerCardId, distance, shotNumber, score, totalPointsOff, x900Total, x1000Total, grandTotal) {

            //    // Display shot score
            //    var cell = $('#registerCard' + registerCardId + distance + 'shot' + shotNumber);
            //    cell.html(score);
            //    cell.effect("highlight", null, 5000);

            //    // Set x900 total display
            //    cell = $('#registerCard' + registerCardId + 'x900Total');
            //    cell.html(x900Total);

            //    // Set x1000 total display
            //    cell = $('#registerCard' + registerCardId + 'x1000Total');
            //    cell.html(x1000Total);

            //    // Set the Grand Total display
            //    cell = $('#registerCard' + registerCardId + 'GrandTotal');
            //    cell.html(grandTotal);

            //    // Set points off display
            //    var pointsOff = $('#registerCard' + registerCardId + 'PointsOff');
            //    pointsOff.html(totalPointsOff);

            //    // Set the data-pointsoff attribute
            //    var pointsOffAttr = $('#registerCard' + registerCardId);
            //    pointsOffAttr.attr("data-pointsoff", totalPointsOff);

            //    $('#Grid').mixitup('sort', ['data-pointsoff', 'desc']);
            //};

            //$.connection.hub.start();

            $('#Grid').mixitup();

            $('#Grid').mixitup('sort', ['data-pointsoff', 'desc']);

            //$('#btnSort').click(function () {
            //    $('#Grid').mixitup('sort', ['data-pointsoff', 'desc']);
            //});

        });
    </script>
}
